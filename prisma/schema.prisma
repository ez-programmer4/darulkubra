generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// ============================================================================
// CORE USER MODELS
// ============================================================================

model Teacher {
    id           String    @id @default(cuid())
    ustazid      String    @unique @db.VarChar(255)
    name         String?   @db.VarChar(120)
    phone        String?   @db.VarChar(32)
    schedule     String?   @db.VarChar(255)
    password     String    @db.VarChar(255)
    controllerId String?   @db.VarChar(255)
    createdAt    DateTime? @default(now()) @db.Timestamp(0)

    // Relations
    students       Student[]             @relation("TeacherStudents")
    controller     Controller?           @relation("TeacherController", fields: [controllerId], references: [code])
    occupiedTimes  TeacherOccupiedTime[]
    zoomLinks      ZoomLink[]
    coursePackages CoursePackage[]
    teacherRatings TeacherRating[]

    // Salary & Payment Relations
    absenceRecords     AbsenceRecord[]
    attendanceLogs     AttendanceSubmissionLog[]
    bonusRecords       BonusRecord[]
    latenessConfigs    LatenessDeductionConfig[]
    latenessRecords    LatenessRecord[]
    permissionRequests PermissionRequest[]
    qualityAssessments QualityAssessment[]
    salaryPayments     TeacherSalaryPayment[]

    @@index([ustazid])
    @@index([controllerId])
    @@map("wpos_wpdatatable_24")
}

model Student {
    id                 Int       @id @default(autoincrement())
    name               String?   @db.VarChar(255)
    phone              String?   @db.VarChar(32)
    classFee           Float?    @db.Float
    startDate          DateTime? @db.DateTime(0)
    status             String?   @db.VarChar(255)
    teacherId          String?   @db.VarChar(255)
    package            String?   @db.VarChar(255)
    subject            String?   @db.VarChar(255)
    country            String?   @db.VarChar(255)
    registrationNumber String?   @db.VarChar(255)
    dayPackages        String?   @db.VarChar(255)
    referrer           String?   @db.VarChar(255)
    registrationDate   DateTime? @default(now()) @db.DateTime(0)
    isTrained          Boolean?  @default(false)
    chatId             String?   @map("chat_id") @db.VarChar(64)
    progress           String?   @db.VarChar(64)
    controllerId       String?   @db.VarChar(255)
    exitDate           DateTime? @db.DateTime(0)
    isKid              Boolean?  @default(false)
    reason             String?   @db.VarChar(255)
    userId             String?   @unique

    // Relations
    teacher    Teacher?    @relation("TeacherStudents", fields: [teacherId], references: [ustazid])
    controller Controller? @relation("StudentController", fields: [controllerId], references: [code])
    user       User?       @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    // Course Relations
    coursePackages      CoursePackage[] @relation("StudentPackageHistory")
    activeCoursePackage CoursePackage?  @relation("StudentActivePackage", fields: [youtubeSubject], references: [id])
    youtubeSubject      String?

    // Progress & Assessment Relations
    monthsTable        MonthTable[]
    payments           Payment[]
    attendanceProgress StudentAttendanceProgress[]
    testAppointments   TestAppointment[]
    testResults        TestResult[]
    occupiedTimes      TeacherOccupiedTime[]       @relation("StudentOccupiedTimes")
    zoomLinks          ZoomLink[]
    studentProgress    StudentProgress[]
    finalExamResults   FinalExamResult[]
    tarbiaAttendance   TarbiaAttendance[]
    studentQuizzes     StudentQuiz[]

    @@index([teacherId])
    @@index([controllerId])
    @@map("wpos_wpdatatable_23")
}

model Controller {
    id       Int     @id @default(autoincrement())
    name     String? @unique @db.VarChar(255)
    username String? @unique @db.VarChar(255)
    password String  @db.VarChar(255)
    code     String? @unique @db.VarChar(255)

    // Relations
    teachers Teacher[] @relation("TeacherController")
    students Student[] @relation("StudentController")

    // Management Relations
    absenceRecords            AbsenceRecord[]
    attendanceLogs            AttendanceSubmissionLog[]
    auditLogs                 AuditLog[]
    bonusRecords              BonusRecord[]
    controllerEarningsConfigs ControllerEarningsConfig[]
    deductionBonusConfigs     DeductionBonusConfig[]
    latenessConfigs           LatenessDeductionConfig[]
    latenessRecords           LatenessRecord[]
    permissionRequests        PermissionRequest[]
    qualityAssessments        QualityAssessment[]
    qualityDescriptions       QualityDescription[]
    salaryPayments            TeacherSalaryPayment[]

    @@map("wpos_wpdatatable_28")
}

model Admin {
    id        String   @id @default(cuid())
    name      String   @unique @db.VarChar(120)
    username  String?  @unique @db.VarChar(120)
    passcode  String   @db.VarChar(120)
    phone     String?  @db.VarChar(32)
    role      String?  @default("admin") @db.VarChar(20)
    chatId    String   @unique
    createdAt DateTime @default(now())

    // Relations
    absenceRecords            AbsenceRecord[]
    attendanceLogs            AttendanceSubmissionLog[]
    auditLogs                 AuditLog[]
    bonusRecords              BonusRecord[]
    controllerEarningsConfigs ControllerEarningsConfig[]
    deductionBonusConfigs     DeductionBonusConfig[]
    latenessConfigs           LatenessDeductionConfig[]
    latenessRecords           LatenessRecord[]
    permissionRequests        PermissionRequest[]
    qualityAssessments        QualityAssessment[]
    qualityDescriptions       QualityDescription[]
    salaryPayments            TeacherSalaryPayment[]

    @@map("admin")
}

model User {
    id          String @id @default(cuid())
    role        Role
    firstName   String @default("")
    lastName    String @default("")
    phoneNumber String @default("")
    email       String @unique @map("username")
    password    String

    // Relations
    student Student?

    @@map("user")
}

// ============================================================================
// COURSE & LEARNING MODELS
// ============================================================================

model CoursePackage {
    id                  String   @id @default(uuid())
    name                String   @db.Text
    description         String?  @db.Text
    examDurationMinutes Int?
    isPublished         Boolean  @default(false)
    teacherId           String?
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    // Relations
    teacher          Teacher?           @relation(fields: [teacherId], references: [ustazid])
    courses          Course[]
    questions        Question[]
    finalExamResults FinalExamResult[]
    students         Student[]          @relation("StudentPackageHistory")
    activeStudents   Student[]          @relation("StudentActivePackage")
    subjectPackages  SubjectPackage[]
    tarbiaAttendance TarbiaAttendance[]

    @@map("course_packages")
}

model SubjectPackage {
    id          String   @id @default(uuid())
    kidPackage  Boolean? @default(false)
    packageType String?
    subject     String?
    packageId   String
    createdAt   DateTime @default(now())

    // Relations
    package CoursePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

    @@map("subject_packages")
}

model Course {
    id          String   @id @default(uuid())
    title       String   @db.Text
    description String?  @db.Text
    imageUrl    String?  @db.Text
    isPublished Boolean  @default(false)
    order       Int
    timeLimit   Int?
    timeUnit    String?
    packageId   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    package  CoursePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
    chapters Chapter[]

    @@index([packageId])
    @@map("courses")
}

model Chapter {
    id          String   @id @default(uuid())
    title       String
    description String?  @db.Text
    videoUrl    String?  @db.Text
    position    Int
    isPublished Boolean  @default(false)
    courseId    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
    questions       Question[]
    studentProgress StudentProgress[]

    @@index([courseId])
    @@map("chapters")
}

model Question {
    id        String   @id @default(cuid())
    question  String   @db.Text
    chapterId String?
    packageId String?
    createdAt DateTime @default(now())

    // Relations
    chapter         Chapter?         @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    package         CoursePackage?   @relation(fields: [packageId], references: [id], onDelete: Cascade)
    questionOptions QuestionOption[]
    questionAnswers QuestionAnswer[]
    studentQuizzes  StudentQuiz[]

    @@index([chapterId])
    @@map("questions")
}

model QuestionOption {
    id         String   @id @default(cuid())
    option     String
    questionId String
    createdAt  DateTime @default(now())

    // Relations
    question           Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionAnswers    QuestionAnswer[]
    studentQuizAnswers StudentQuizAnswer[]

    @@index([questionId])
    @@map("question_options")
}

model QuestionAnswer {
    id         String @id @default(cuid())
    questionId String
    answerId   String

    // Relations
    question Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answer   QuestionOption @relation(fields: [answerId], references: [id], onDelete: Cascade)

    @@index([questionId])
    @@index([answerId])
    @@map("question_answers")
}

// ============================================================================
// STUDENT PROGRESS & ASSESSMENT MODELS
// ============================================================================

model StudentProgress {
    id          String    @id @default(cuid())
    studentId   Int
    chapterId   String
    isStarted   Boolean   @default(true)
    isCompleted Boolean   @default(false)
    completedAt DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    @@unique([studentId, chapterId])
    @@index([chapterId])
    @@index([studentId])
    @@map("student_progress")
}

model StudentQuiz {
    id          String   @id @default(cuid())
    studentId   Int
    questionId  String
    isFinalExam Boolean  @default(false)
    takenAt     DateTime @default(now())

    // Relations
    student            Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
    question           Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
    studentQuizAnswers StudentQuizAnswer[]

    @@unique([studentId, questionId])
    @@index([questionId])
    @@index([studentId])
    @@map("student_quizzes")
}

model StudentQuizAnswer {
    id               String @id @default(cuid())
    studentQuizId    String
    selectedOptionId String

    // Relations
    studentQuiz    StudentQuiz    @relation(fields: [studentQuizId], references: [id], onDelete: Cascade)
    selectedOption QuestionOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)

    @@unique([studentQuizId, selectedOptionId])
    @@index([selectedOptionId])
    @@index([studentQuizId])
    @@map("student_quiz_answers")
}

model FinalExamResult {
    id                 String    @id @default(cuid())
    studentId          Int
    packageId          String
    updationProhibited Boolean   @default(false)
    startingTime       DateTime  @default(now())
    endingTime         DateTime?

    // Relations
    student Student       @relation(fields: [studentId], references: [id])
    package CoursePackage @relation(fields: [packageId], references: [id])

    @@map("final_exam_results")
}

model TarbiaAttendance {
    id        String   @id @default(cuid())
    studentId Int
    packageId String
    status    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    student Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
    package CoursePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

    @@map("tarbia_attendance")
}

// ============================================================================
// PAYMENT & SALARY MODELS
// ============================================================================

model TeacherSalaryPayment {
    id                Int       @id @default(autoincrement())
    teacherId         String    @db.VarChar(255)
    period            String
    status            String
    paidAt            DateTime?
    totalSalary       Float
    latenessDeduction Float
    absenceDeduction  Float
    bonuses           Float
    createdAt         DateTime  @default(now())
    adminId           String?
    controllerId      Int?

    // Relations
    teacher    Teacher     @relation(fields: [teacherId], references: [ustazid])
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@unique([teacherId, period])
    @@index([teacherId, period])
    @@index([adminId])
    @@index([controllerId])
    @@map("teacher_salary_payments")
}

model PackageSalary {
    id               Int      @id @default(autoincrement())
    packageName      String   @unique
    salaryPerStudent Decimal  @db.Decimal(10, 2)
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@map("package_salaries")
}

model PackageDeduction {
    id                 Int      @id @default(autoincrement())
    packageName        String   @unique
    latenessBaseAmount Decimal  @default(30.00) @db.Decimal(10, 2)
    absenceBaseAmount  Decimal  @default(25.00) @db.Decimal(10, 2)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    @@map("package_deductions")
}

model DeductionWaiver {
    id             Int      @id @default(autoincrement())
    teacherId      String   @db.VarChar(255)
    deductionType  String   @db.VarChar(50)
    deductionDate  DateTime @db.Date
    originalAmount Decimal  @db.Decimal(10, 2)
    reason         String   @db.Text
    adminId        String   @db.VarChar(255)
    createdAt      DateTime @default(now())

    @@unique([teacherId, deductionType, deductionDate], name: "unique_waiver")
    @@index([teacherId, deductionDate])
    @@index([deductionType, deductionDate])
    @@index([adminId])
    @@map("deduction_waivers")
}

// ============================================================================
// ATTENDANCE & LATENESS MODELS
// ============================================================================

model AbsenceRecord {
    id                  Int      @id @default(autoincrement())
    teacherId           String
    classDate           DateTime
    timeSlots           String? // JSON string of affected time slots
    permitted           Boolean
    permissionRequestId Int?
    deductionApplied    Float
    reviewedByManager   Boolean
    reviewNotes         String?
    createdAt           DateTime @default(now())
    adminId             String?
    controllerId        Int?

    // Relations
    teacher           Teacher            @relation(fields: [teacherId], references: [ustazid])
    admin             Admin?             @relation(fields: [adminId], references: [id])
    controller        Controller?        @relation(fields: [controllerId], references: [id])
    permissionRequest PermissionRequest? @relation(fields: [permissionRequestId], references: [id])

    @@index([teacherId])
    @@index([adminId])
    @@index([controllerId])
    @@index([permissionRequestId])
    @@map("absence_records")
}

model LatenessRecord {
    id               Int      @id @default(autoincrement())
    teacherId        String
    classDate        DateTime
    scheduledTime    DateTime
    actualStartTime  DateTime
    latenessMinutes  Int
    deductionApplied Float
    deductionTier    String
    createdAt        DateTime @default(now())
    adminId          String?
    controllerId     Int?

    // Relations
    teacher    Teacher     @relation(fields: [teacherId], references: [ustazid])
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([teacherId])
    @@index([adminId])
    @@index([controllerId])
    @@map("lateness_records")
}

model AttendanceSubmissionLog {
    id               Int      @id @default(autoincrement())
    teacherId        String
    classDate        DateTime
    submittedAt      DateTime
    isLate           Boolean
    deductionApplied Float
    createdAt        DateTime @default(now())
    adminId          String?
    controllerId     Int?

    // Relations
    teacher    Teacher     @relation(fields: [teacherId], references: [ustazid])
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([teacherId])
    @@index([adminId])
    @@index([controllerId])
    @@map("attendance_submission_logs")
}

// ============================================================================
// CONFIGURATION MODELS
// ============================================================================

model LatenessDeductionConfig {
    id               Int      @id @default(autoincrement())
    excusedThreshold Int
    tier             Int
    startMinute      Int
    endMinute        Int
    deductionPercent Float
    isGlobal         Boolean  @default(true)
    teacherId        String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime
    adminId          String?
    controllerId     Int?

    // Relations
    teacher    Teacher?    @relation(fields: [teacherId], references: [ustazid])
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([teacherId])
    @@index([adminId])
    @@index([controllerId])
    @@map("lateness_deduction_configs")
}

model ControllerEarningsConfig {
    id                      Int      @id @default(autoincrement())
    mainBaseRate            Float    @default(40)
    referralBaseRate        Float    @default(40)
    leavePenaltyMultiplier  Float    @default(3)
    leaveThreshold          Int      @default(5)
    unpaidPenaltyMultiplier Float    @default(2)
    referralBonusMultiplier Float    @default(4)
    targetEarnings          Float    @default(3000)
    effectiveFrom           DateTime @default(now())
    isActive                Boolean  @default(true)
    createdAt               DateTime @default(now())
    updatedAt               DateTime
    adminId                 String?
    controllerId            Int?

    // Relations
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([adminId])
    @@index([controllerId])
    @@map("controller_earnings_configs")
}

model DeductionBonusConfig {
    id              Int      @id @default(autoincrement())
    configType      String
    key             String
    value           String
    effectiveMonths String?
    updatedAt       DateTime
    adminId         String?
    controllerId    Int?

    // Relations
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([adminId])
    @@index([controllerId])
    @@map("deduction_bonus_configs")
}

// ============================================================================
// QUALITY & ASSESSMENT MODELS
// ============================================================================

model QualityAssessment {
    id                 Int      @id @default(autoincrement())
    teacherId          String
    weekStart          DateTime
    supervisorFeedback String   @db.Text
    examinerRating     Float?
    studentPassRate    Float?
    overallQuality     String
    managerApproved    Boolean
    managerOverride    Boolean
    overrideNotes      String?
    bonusAwarded       Float?
    createdAt          DateTime @default(now())
    adminId            String?
    controllerId       Int?

    // Relations
    teacher    Teacher     @relation(fields: [teacherId], references: [ustazid])
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([teacherId])
    @@index([adminId])
    @@index([controllerId])
    @@map("quality_assessments")
}

model QualityDescription {
    id           Int      @id @default(autoincrement())
    type         String
    description  String
    updatedAt    DateTime @default(now())
    adminId      String?
    controllerId Int?

    // Relations
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([adminId])
    @@index([controllerId])
    @@map("quality_descriptions")
}

// ============================================================================
// PERMISSION & REQUEST MODELS
// ============================================================================

model PermissionRequest {
    id               Int       @id @default(autoincrement())
    teacherId        String
    requestedDate    String // Single date
    timeSlots        String // JSON array of time slots
    reasonCategory   String
    reasonDetails    String
    supportingDocs   String?
    status           String
    reviewedAt       DateTime?
    reviewNotes      String?
    lateReviewReason String?
    createdAt        DateTime  @default(now())
    adminId          String?
    controllerId     Int?

    // Relations
    teacher        Teacher         @relation(fields: [teacherId], references: [ustazid])
    admin          Admin?          @relation(fields: [adminId], references: [id])
    controller     Controller?     @relation(fields: [controllerId], references: [id])
    absenceRecords AbsenceRecord[]

    @@index([teacherId])
    @@index([adminId])
    @@index([controllerId])
    @@map("permission_requests")
}

model PermissionReason {
    id        Int      @id @default(autoincrement())
    reason    String
    createdAt DateTime @default(now())

    @@map("permission_reasons")
}

// ============================================================================
// BONUS & EARNINGS MODELS
// ============================================================================

model BonusRecord {
    id           Int      @id @default(autoincrement())
    teacherId    String
    period       String
    amount       Float
    reason       String
    createdAt    DateTime @default(now())
    adminId      String?
    controllerId Int?

    // Relations
    teacher    Teacher     @relation(fields: [teacherId], references: [ustazid])
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([teacherId])
    @@index([adminId])
    @@index([controllerId])
    @@map("bonus_records")
}

model ControllerEarning {
    id                 Int      @id @default(autoincrement())
    controllerUsername String
    studentId          Int
    paymentId          Int
    amount             Decimal  @db.Decimal(10, 2)
    createdAt          DateTime @default(now())
    paidOut            Boolean  @default(false)

    @@map("controller_earnings")
}

// ============================================================================
// ZOOM & COMMUNICATION MODELS
// ============================================================================

model ZoomLink {
    id             Int       @id @default(autoincrement())
    studentId      Int
    teacherId      String?   @db.VarChar(255)
    link           String    @db.VarChar(255)
    trackingToken  String    @db.VarChar(32)
    clickedAt      DateTime? @db.DateTime(0)
    sentTime       DateTime? @db.DateTime(0)
    report         Int?      @default(0)
    expirationDate DateTime? @db.DateTime(0)
    packageId      String?   @db.VarChar(191)
    packageRate    Decimal?  @db.Decimal(10, 2)

    // Relations
    student Student  @relation(fields: [studentId], references: [id])
    teacher Teacher? @relation(fields: [teacherId], references: [ustazid])

    @@index([studentId])
    @@index([teacherId])
    @@index([sentTime])
    @@map("zoom_links")
}

model TeacherOccupiedTime {
    id         Int       @id @default(autoincrement())
    teacherId  String    @db.VarChar(255)
    timeSlot   String    @db.VarChar(255)
    dayPackage String    @db.VarChar(255)
    studentId  Int
    occupiedAt DateTime? @default(now()) @db.Timestamp(0)
    endAt      DateTime? @db.Timestamp(0)

    // Relations
    teacher Teacher @relation(fields: [teacherId], references: [ustazid])
    student Student @relation("StudentOccupiedTimes", fields: [studentId], references: [id])

    @@unique([teacherId, timeSlot, dayPackage])
    @@index([studentId])
    @@index([occupiedAt])
    @@map("teacher_occupied_times")
}

// ============================================================================
// PAYMENT & FINANCIAL MODELS
// ============================================================================

model Payment {
    id            Int      @id @default(autoincrement()) @map("wdt_ID")
    studentId     Int
    studentName   String   @db.VarChar(255)
    paymentDate   DateTime @db.DateTime(0)
    transactionId String   @db.VarChar(255)
    paidAmount    Decimal  @db.Decimal(10, 0)
    reason        String   @db.VarChar(2000)
    status        String   @default("pending") @db.VarChar(20)

    // Relations
    student Student @relation(fields: [studentId], references: [id])

    @@map("payments")
}

model MonthTable {
    id              Int       @id @default(autoincrement())
    studentId       Int
    month           String?   @db.Char(7)
    paidAmount      Int
    paymentStatus   String    @db.VarChar(50)
    endDate         DateTime? @db.DateTime(0)
    paymentType     String?   @default("full") @db.VarChar(20)
    startDate       DateTime? @db.DateTime(0)
    freeMonthReason String?   @db.VarChar(100)
    isFreeMonth     Boolean?  @default(false)

    // Relations
    student Student @relation(fields: [studentId], references: [id])

    @@index([studentId])
    @@map("months_table")
}

model StudentAttendanceProgress {
    id               Int      @id @default(autoincrement())
    studentId        Int
    date             DateTime @default(now()) @db.DateTime(0)
    attendanceStatus String   @db.VarChar(255)
    surah            String?  @db.VarChar(255)
    pagesRead        Int?
    level            String?  @db.VarChar(255)
    lesson           String?  @db.VarChar(255)
    notes            String?  @db.Text

    // Relations
    student Student @relation(fields: [studentId], references: [id])

    @@index([studentId])
    @@index([date])
    @@map("student_attendance_progress")
}

// ============================================================================
// TESTING MODELS
// ============================================================================

model Test {
    id            String @id @default(uuid())
    name          String @unique
    passingResult Int
    lastSubject   String @default("")

    // Relations
    testAppointments TestAppointment[]
    testQuestions    TestQuestion[]

    @@map("tests")
}

model TestAppointment {
    id        String    @id
    studentId Int
    testId    String
    date      DateTime?

    // Relations
    student Student @relation(fields: [studentId], references: [id])
    test    Test    @relation(fields: [testId], references: [id])

    @@unique([studentId, testId])
    @@index([testId])
    @@map("test_appointments")
}

model TestQuestion {
    id       String @id
    testId   String
    question String
    odd      Int

    // Relations
    test        Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
    testResults TestResult[]

    @@index([testId])
    @@map("test_questions")
}

model TestResult {
    id         String @id
    studentId  Int
    questionId String
    result     Int

    // Relations
    student  Student      @relation(fields: [studentId], references: [id])
    question TestQuestion @relation(fields: [questionId], references: [id])

    @@index([questionId])
    @@index([studentId])
    @@map("test_results")
}

// ============================================================================
// RATING & FEEDBACK MODELS
// ============================================================================

model TeacherRating {
    id        String @id @default(uuid())
    teacherId String
    rating    Int // Rating from 1-5

    // Relations
    teacher Teacher? @relation(fields: [teacherId], references: [ustazid], onDelete: Cascade)

    @@map("teacher_ratings")
}

// ============================================================================
// AUDIT & LOGGING MODELS
// ============================================================================

model AuditLog {
    id           Int      @id @default(autoincrement())
    actionType   String
    adminId      String?
    targetId     Int?
    details      String
    createdAt    DateTime @default(now())
    controllerId Int?

    // Relations
    admin      Admin?      @relation(fields: [adminId], references: [id])
    controller Controller? @relation(fields: [controllerId], references: [id])

    @@index([adminId])
    @@index([controllerId])
    @@map("audit_logs")
}

model Notification {
    id        Int      @id @default(autoincrement())
    title     String   @db.VarChar(255)
    message   String   @db.Text
    type      String   @db.VarChar(50)
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now()) @db.Timestamp(0)
    userId    String   @db.VarChar(255)
    userRole  String   @db.VarChar(50)

    @@map("notifications")
}

// ============================================================================
// SETTINGS & CONFIGURATION MODELS
// ============================================================================

model Setting {
    id        Int      @id @default(autoincrement())
    key       String   @unique @db.VarChar(64)
    value     String?  @db.Text
    updatedAt DateTime

    @@map("settings")
}

model RegistralEarningsConfig {
    id        Int      @id @default(autoincrement())
    key       String   @unique @db.VarChar(255)
    value     String   @db.Text
    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

    @@map("registral_earnings_configs")
}

model StudentDayPackage {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("student_day_packages")
}

// ============================================================================
// ENHANCED MODELS FOR TEACHER SALARY SYSTEM
// ============================================================================

model SalaryCalculationCache {
    id              String   @id @default(cuid())
    teacherId       String   @db.VarChar(255)
    period          String   @db.VarChar(7)
    calculationData Json
    expiresAt       DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@unique([teacherId, period])
    @@index([teacherId])
    @@index([period])
    @@index([expiresAt])
    @@map("salary_calculation_cache")
}

model PaymentTransaction {
    id            String   @id @default(cuid())
    teacherId     String   @db.VarChar(255)
    amount        Decimal  @db.Decimal(10, 2)
    period        String   @db.VarChar(7)
    transactionId String   @unique @db.VarChar(255)
    status        String   @default("pending") @db.VarChar(20)
    processedAt   DateTime @default(now())
    createdAt     DateTime @default(now())

    @@index([teacherId])
    @@index([period])
    @@index([status])
    @@index([processedAt])
    @@map("payment_transactions")
}

model SalaryAdjustment {
    id             String   @id @default(cuid())
    teacherId      String   @db.VarChar(255)
    period         String   @db.VarChar(7)
    adjustmentType String   @db.VarChar(20)
    amount         Decimal  @db.Decimal(10, 2)
    reason         String   @db.Text
    adminId        String   @db.VarChar(255)
    createdAt      DateTime @default(now())

    @@index([teacherId])
    @@index([period])
    @@index([adjustmentType])
    @@index([adminId])
    @@map("salary_adjustments")
}

model SalaryReport {
    id          String    @id @default(cuid())
    reportType  String    @db.VarChar(20)
    period      String    @db.VarChar(7)
    format      String    @db.VarChar(10)
    status      String    @default("pending") @db.VarChar(20)
    filePath    String?   @db.VarChar(500)
    generatedAt DateTime?
    adminId     String    @db.VarChar(255)
    createdAt   DateTime  @default(now())

    @@index([reportType])
    @@index([period])
    @@index([status])
    @@index([adminId])
    @@map("salary_reports")
}

// ============================================================================
// ENUMS
// ============================================================================

enum Role {
    manager
    teacher
    student
}
